!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/5010e84/
+	init.vim	/^nnoremap + <c-w>5>$/;"	m
<C-c>	init.vim	/^vnoremap <C-c> "+y$/;"	m
<C-p>	init.vim	/^nnoremap <C-p> :Files<CR>$/;"	m
<C-v>	init.vim	/^inoremap <C-v> <Esc>"+p$/;"	m
<Leader><space>	init.vim	/^nnoremap <Leader><space> :noh<CR>$/;"	m
<Leader>F	init.vim	/^nnoremap <Leader>F :call Search(1)<CR>$/;"	m
<Leader>G	init.vim	/^nnoremap <Leader>G :call PromptJsFileImport()<CR>$/;"	m
<Leader>]	init.vim	/^nnoremap <Leader>] <C-W>v<C-]>$/;"	m
<Leader>b	init.vim	/^nnoremap <Leader>b :Buffers<CR>$/;"	m
<Leader>c	init.vim	/^nmap <Leader>c gcc$/;"	m
<Leader>c	init.vim	/^xmap <Leader>c gc$/;"	m
<Leader>e	init.vim	/^nnoremap <Leader>e :lopen<CR>$/;"	m
<Leader>f	init.vim	/^nnoremap <Leader>f :call Search()<CR>$/;"	m
<Leader>g	init.vim	/^nnoremap <Leader>g :call JsFileImport()<CR>$/;"	m
<Leader>h	init.vim	/^nnoremap <Leader>h viw"0p$/;"	m
<Leader>hf	init.vim	/^nnoremap <Leader>hf :NERDTreeFind<CR>$/;"	m
<Leader>m	init.vim	/^nnoremap <Leader>m :History<CR>$/;"	m
<Leader>n	init.vim	/^nnoremap <Leader>n :NERDTreeToggle<CR>$/;"	m
<Leader>p	init.vim	/^nnoremap <Leader>p "0p$/;"	m
<Leader>p	init.vim	/^vnoremap <Leader>p "0p$/;"	m
<Leader>q	init.vim	/^nnoremap <Leader>q :lclose<CR>$/;"	m
<Leader>r	init.vim	/^nnoremap <Leader>r :ALEFix<CR>$/;"	m
<Leader>s	init.vim	/^nnoremap <Leader>s :w<CR>$/;"	m
<Leader>t	init.vim	/^nnoremap <Leader>t :BTags<CR>$/;"	m
<Leader>v	init.vim	/^nnoremap <Leader>v <C-w>v$/;"	m
<S-TAB>	init.vim	/^imap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<S-Tab>"$/;"	m
<TAB>	init.vim	/^imap <expr><TAB> neosnippet#expandable_or_jumpable() ?$/;"	m
<TAB>	init.vim	/^smap <expr><TAB> neosnippet#jumpable() ?$/;"	m
<c-Space>	init.vim	/^nnoremap <c-Space> <C-w>p$/;"	m
<c-h>	init.vim	/^nnoremap <c-h> <C-w>h$/;"	m
<c-j>	init.vim	/^nnoremap <c-j> <C-w>j$/;"	m
<c-k>	init.vim	/^nnoremap <c-k> <C-w>k$/;"	m
<c-l>	init.vim	/^nnoremap <c-l> <C-w>l$/;"	m
<c-s>	init.vim	/^imap <c-s> <C-o>:w<CR>$/;"	m
<c-s>	init.vim	/^map <c-s> :w<CR>$/;"	m
<leader><tab>	init.vim	/^nnoremap <leader><tab> <c-^>$/;"	m
<s-tab>	init.vim	/^xnoremap <s-tab> <gv$/;"	m
<tab>	init.vim	/^xnoremap <tab> >gv$/;"	m
J	init.vim	/^vnoremap J :m '>+1<CR>gv=gv$/;"	m
K	init.vim	/^vnoremap K :m '<-2<CR>gv=gv$/;"	m
N	init.vim	/^nnoremap N Nzz$/;"	m
Q	init.vim	/^map Q <Nop>$/;"	m
Search	init.vim	/^function! Search(...)$/;"	f
StripTrailingWhitespaces	init.vim	/^function! StripTrailingWhitespaces()$/;"	f
_	init.vim	/^nnoremap _ <c-w>5<$/;"	m
bg	tmux.conf	/^set -g status-style "bg=colour234,none"$/;"	k
fg	tmux.conf	/^set -g message-command-style "fg=colour144,bg=colour237"$/;"	k
fg	tmux.conf	/^set -g message-style "fg=colour144,bg=colour237"$/;"	k
fg	tmux.conf	/^set -g pane-active-border-style "fg=colour27"$/;"	k
fg	tmux.conf	/^set -g pane-border-style "fg=colour237"$/;"	k
fg	tmux.conf	/^setw -g window-status-activity-style "fg=colour27,bg=colour234,none"$/;"	k
fg	tmux.conf	/^setw -g window-status-style "fg=colour39,bg=colour234,none"$/;"	k
g:NERDTreeChDirMode	init.vim	/^let g:NERDTreeChDirMode = 2                                                     "Always change t/;"	v
g:NERDTreeMinimalUI	init.vim	/^let g:NERDTreeMinimalUI = 1                                                     "Disable help te/;"	v
g:NERDTreeShowHidden	init.vim	/^let g:NERDTreeShowHidden = 1                                                    "Show hidden fil/;"	v
g:ale_fixers	init.vim	/^let g:ale_fixers = {'javascript': ['prettier', 'eslint']}                       "Fix eslint erro/;"	v
g:ale_javascript_prettier_options	init.vim	/^let g:ale_javascript_prettier_options = '--print-width 100'                     "Set max width t/;"	v
g:ale_lint_on_save	init.vim	/^let g:ale_lint_on_save = 1                                                      "Lint when savin/;"	v
g:ale_linters	init.vim	/^let g:ale_linters = {'javascript': ['eslint'],$/;"	v
g:ale_sign_error	init.vim	/^let g:ale_sign_error = '✖'                                                      "Lint error si/;"	v
g:ale_sign_warning	init.vim	/^let g:ale_sign_warning = '⚠'                                                    "Lint warning /;"	v
g:ale_statusline_format	init.vim	/^let g:ale_statusline_format =[' %d E ', ' %d W ', '']                           "Status line tex/;"	v
g:ctrlsf_auto_close	init.vim	/^let g:ctrlsf_auto_close = 0                                                     "Do not close se/;"	v
g:ctrlsf_mapping	init.vim	/^let g:ctrlsf_mapping = {'vsplit': 's'}                                          "Mapping for ope/;"	v
g:delimitMate_expand_cr	init.vim	/^let g:delimitMate_expand_cr = 1                                                 "auto indent on /;"	v
g:deoplete#enable_at_startup	init.vim	/^let g:deoplete#enable_at_startup = 1                                            "Enable deoplete/;"	v
g:deoplete#enable_camel_case	init.vim	/^let g:deoplete#enable_camel_case = 1                                            "Enable camel ca/;"	v
g:deoplete#file#enable_buffer_path	init.vim	/^let g:deoplete#file#enable_buffer_path = 1                                      "Autocomplete fi/;"	v
g:deoplete#max_list	init.vim	/^let g:deoplete#max_list = 30                                                    "Show maximum of/;"	v
g:deoplete#tag#cache_limit_size	init.vim	/^let g:deoplete#tag#cache_limit_size = 20000000                                  "Allow tags file/;"	v
g:javascript_plugin_jsdoc	init.vim	/^let g:javascript_plugin_jsdoc = 1                                               "Enable syntax h/;"	v
g:jsx_ext_required	init.vim	/^let g:jsx_ext_required = 1                                                      "Force jsx exten/;"	v
g:mapleader	init.vim	/^let g:mapleader = ","                                                           "Change leader t/;"	v
g:neosnippet#disable_runtime_snippets	init.vim	/^let g:neosnippet#disable_runtime_snippets = {'_' : 1}                           "Snippets setup$/;"	v
g:neosnippet#snippets_directory	init.vim	/^let g:neosnippet#snippets_directory = ['~\/.config\/nvim\/snippets']               "Snippets dir/;"	v
g:quantum_italics	init.vim	/^let g:quantum_italics = 1                                                       "Allow italic co/;"	v
g:user_emmet_leader_key	init.vim	/^let g:user_emmet_leader_key = '<c-e>'                                           "Change trigger /;"	v
g:vimwiki_list	init.vim	/^let g:vimwiki_list = [{'path': '~\/Dropbox\/vimwiki'}]                            "Use dropbox f/;"	v
j	init.vim	/^nnoremap j gj$/;"	m
jj	init.vim	/^inoremap jj <Esc>$/;"	m
k	init.vim	/^nnoremap k gk$/;"	m
n	init.vim	/^nnoremap n nzz$/;"	m
p	init.vim	/^nnoremap p p`]$/;"	m
p	init.vim	/^vnoremap p p`]$/;"	m
t	tmux.conf	/^bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t/;"	k
t	tmux.conf	/^bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =/;"	k
vimrc	init.vim	/^augroup vimrc$/;"	a
y	init.vim	/^vnoremap y y`]$/;"	m
